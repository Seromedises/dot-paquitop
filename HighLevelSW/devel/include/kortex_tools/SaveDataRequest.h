// Generated by gencpp from file kortex_tools/SaveDataRequest.msg
// DO NOT EDIT!


#ifndef KORTEX_TOOLS_MESSAGE_SAVEDATAREQUEST_H
#define KORTEX_TOOLS_MESSAGE_SAVEDATAREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_tools
{
template <class ContainerAllocator>
struct SaveDataRequest_
{
  typedef SaveDataRequest_<ContainerAllocator> Type;

  SaveDataRequest_()
    : Save(0)  {
    }
  SaveDataRequest_(const ContainerAllocator& _alloc)
    : Save(0)  {
  (void)_alloc;
    }



   typedef int64_t _Save_type;
  _Save_type Save;





  typedef boost::shared_ptr< ::kortex_tools::SaveDataRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_tools::SaveDataRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SaveDataRequest_

typedef ::kortex_tools::SaveDataRequest_<std::allocator<void> > SaveDataRequest;

typedef boost::shared_ptr< ::kortex_tools::SaveDataRequest > SaveDataRequestPtr;
typedef boost::shared_ptr< ::kortex_tools::SaveDataRequest const> SaveDataRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_tools::SaveDataRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_tools::SaveDataRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_tools::SaveDataRequest_<ContainerAllocator1> & lhs, const ::kortex_tools::SaveDataRequest_<ContainerAllocator2> & rhs)
{
  return lhs.Save == rhs.Save;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_tools::SaveDataRequest_<ContainerAllocator1> & lhs, const ::kortex_tools::SaveDataRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_tools

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_tools::SaveDataRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_tools::SaveDataRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_tools::SaveDataRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_tools::SaveDataRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_tools::SaveDataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_tools::SaveDataRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_tools::SaveDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d27cc03f840c3e5aa15802dc4692ad7d";
  }

  static const char* value(const ::kortex_tools::SaveDataRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd27cc03f840c3e5aULL;
  static const uint64_t static_value2 = 0xa15802dc4692ad7dULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_tools::SaveDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_tools/SaveDataRequest";
  }

  static const char* value(const ::kortex_tools::SaveDataRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_tools::SaveDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 Save\n"
;
  }

  static const char* value(const ::kortex_tools::SaveDataRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_tools::SaveDataRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Save);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SaveDataRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_tools::SaveDataRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_tools::SaveDataRequest_<ContainerAllocator>& v)
  {
    s << indent << "Save: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Save);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_TOOLS_MESSAGE_SAVEDATAREQUEST_H
